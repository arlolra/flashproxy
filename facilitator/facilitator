#!/usr/bin/env python

import SocketServer
import getopt
import os
import socket
import sys
import threading
import time

import fac

LISTEN_ADDRESS = "127.0.0.1"
DEFAULT_LISTEN_PORT = 9002
DEFAULT_RELAY_PORT = 9001
DEFAULT_LOG_FILENAME = "facilitator.log"

# Tell proxies to poll for clients every POLL_INTERVAL seconds.
POLL_INTERVAL = 600

# Don't indulge clients for more than this many seconds.
CLIENT_TIMEOUT = 1.0
# Buffer no more than this many bytes when trying to read a line.
READLINE_MAX_LENGTH = 10240

MAX_PROXIES_PER_CLIENT = 5

LOG_DATE_FORMAT = "%Y-%m-%d %H:%M:%S"

class options(object):
    listen_port = DEFAULT_LISTEN_PORT
    log_filename = DEFAULT_LOG_FILENAME
    log_file = sys.stdout
    relay_spec = None
    daemonize = True
    pid_filename = None
    privdrop_username = None
    safe_logging = True

    @staticmethod
    def set_relay_spec(spec):
        spec = fac.parse_addr_spec(spec, defport = DEFAULT_RELAY_PORT, resolve = True)
        options.relay_spec = fac.format_addr(spec)

def usage(f = sys.stdout):
    print >> f, """\
Usage: %(progname)s -r RELAY <OPTIONS>
Flash proxy facilitator: Register client addresses and serve them out
again. Listen on 127.0.0.1 and port PORT (by default %(port)d).

  -d, --debug               don't daemonize, log to stdout.
  -h, --help                show this help.
  -l, --log FILENAME        write log to FILENAME (default \"%(log)s\").
  -p, --port PORT           listen on PORT (default %(port)d).
      --pidfile FILENAME    write PID to FILENAME after daemonizing.
      --privdrop-user USER  switch UID and GID to those of USER.
  -r, --relay RELAY         send RELAY (host:port) to proxies as the relay to use.
      --unsafe-logging      don't scrub IP addresses from logs.\
""" % {
    "progname": sys.argv[0],
    "port": DEFAULT_LISTEN_PORT,
    "log": DEFAULT_LOG_FILENAME,
}

def safe_str(s):
    """Return "[scrubbed]" if options.safe_logging is true, and s otherwise."""
    if options.safe_logging:
        return "[scrubbed]"
    else:
        return s

log_lock = threading.Lock()
def log(msg):
    log_lock.acquire()
    try:
        print >> options.log_file, (u"%s %s" % (time.strftime(LOG_DATE_FORMAT), msg)).encode("UTF-8")
        options.log_file.flush()
    finally:
        log_lock.release()

class TCPReg(object):
    def __init__(self, host, port):
        self.host = host
        self.port = port

    def __unicode__(self):
        return fac.format_addr((self.host, self.port))

    def __str__(self):
        return unicode(self).encode("UTF-8")

    def __cmp__(self, other):
        if isinstance(other, TCPReg):
            return cmp((self.host, self.port), (other.host, other.port))
        else:
            return False

class Reg(object):
    @staticmethod
    def parse(spec, defhost = None, defport = None):
        host, port = fac.parse_addr_spec(spec, defhost, defport)
        return TCPReg(host, port)

class RegSet(object):
    def __init__(self):
        self.tiers = [[] for i in range(MAX_PROXIES_PER_CLIENT)]
        self.cv = threading.Condition()

    def add(self, reg):
        self.cv.acquire()
        try:
            for tier in self.tiers:
                if reg in tier:
                    break
            else:
                self.tiers[0].append(reg)
                self.cv.notify()
                return True
            return False
        finally:
            self.cv.release()

    def fetch(self):
        self.cv.acquire()
        try:
            for i in range(len(self.tiers)):
                tier = self.tiers[i]
                if tier:
                    reg = tier.pop(0)
                    if i + 1 < len(self.tiers):
                        self.tiers[i+1].append(reg)
                    return reg
            return None
        finally:
            self.cv.release()

    def __len__(self):
        self.cv.acquire()
        try:
            return sum(len(tier) for tier in self.tiers)
        finally:
            self.cv.release()

class Handler(SocketServer.StreamRequestHandler):
    def __init__(self, *args, **kwargs):
        self.deadline = time.time() + CLIENT_TIMEOUT
        # Buffer for readline.
        self.buffer = ""
        SocketServer.StreamRequestHandler.__init__(self, *args, **kwargs)

    def recv(self):
        timeout = self.deadline - time.time()
        self.connection.settimeout(timeout)
        return self.connection.recv(1024)

    def readline(self):
        # A line already buffered?
        i = self.buffer.find("\n")
        if i >= 0:
            line = self.buffer[:i+1]
            self.buffer = self.buffer[i+1:]
            return line

        auxbuf = []
        buflen = len(self.buffer)
        while True:
            data = self.recv()
            if not data:
                if self.buffer or auxbuf:
                    raise socket.error("readline: stream does not end with a newline")
                else:
                    return ""
            i = data.find("\n")
            if i >= 0:
                line = self.buffer + "".join(auxbuf) + data[:i+1]
                self.buffer = data[i+1:]
                return line
            else:
                auxbuf.append(data)
                buflen += len(data)
                if buflen >= READLINE_MAX_LENGTH:
                    raise socket.error("readline: refusing to buffer %d bytes (last read was %d bytes)" % (buflen, len(data)))

    @fac.catch_epipe
    def handle(self):
        num_lines = 0
        while True:
            try:
                line = self.readline()
                if not line:
                    break
                num_lines += 1
            except socket.error, e:
                log("socket error after reading %d lines: %s" % (num_lines, str(e)))
                break
            if not self.handle_line(line):
                break

    def handle_line(self, line):
        if not (len(line) > 0 and line[-1] == '\n'):
            raise ValueError("No newline at end of string returned by readline")
        try:
            command, params = fac.parse_transaction(line[:-1])
        except ValueError, e:
            log("fac.parse_transaction: %s" % e)
            self.send_error()
            return False

        if command == "GET":
            return self.do_GET(params)
        elif command == "PUT":
            return self.do_PUT(params)
        else:
            self.send_error()
            return False

    def send_ok(self):
        print >> self.wfile, "OK"

    def send_error(self):
        print >> self.wfile, "ERROR"

    def do_GET(self, params):
        proxy_spec = fac.param_first("FROM", params)
        if proxy_spec is None:
            log(u"GET missing FROM param")
            self.send_error()
            return False
        try:
            proxy_addr = fac.parse_addr_spec(proxy_spec, defport=0)
        except ValueError, e:
            log(u"syntax error in proxy address %s: %s" % (safe_str(repr(proxy_spec)), safe_str(repr(str(e)))))
            self.send_error()
            return False

        try:
            reg = get_reg_for_proxy(proxy_addr)
        except Exception, e:
            log(u"error getting reg for proxy address %s: %s" % (safe_str(repr(proxy_spec)), safe_str(repr(str(e)))))
            self.send_error()
            return False
        check_back_in = get_check_back_in_for_proxy(proxy_addr)
        if reg:
            log(u"proxy gets %s, relay %s (now %d)" %
                (safe_str(unicode(reg)), options.relay_spec, num_regs()))
            print >> self.wfile, fac.render_transaction("OK", ("CLIENT", str(reg)), ("RELAY", options.relay_spec), ("CHECK-BACK-IN", str(check_back_in)))
        else:
            log(u"proxy gets none")
            print >> self.wfile, fac.render_transaction("NONE", ("CHECK-BACK-IN", str(check_back_in)))
        return True

    def do_PUT(self, params):
        client_spec = fac.param_first("CLIENT", params)
        if client_spec is None:
            log(u"PUT missing CLIENT param")
            self.send_error()
            return False

        # FROM

        try:
            reg = Reg.parse(client_spec)
        except ValueError, e:
            log(u"syntax error in %s: %s" % (safe_str(repr(client_spec)), safe_str(repr(str(e)))))
            self.send_error()
            return False

        try:
            ok = put_reg(reg)
        except Exception, e:
            log(u"error putting reg %s: %s" % (safe_str(repr(client_spec)), safe_str(repr(str(e)))))
            self.send_error()
            return False
        if ok:
            log(u"client %s (now %d)" % (safe_str(unicode(reg)), num_regs()))
        else:
            log(u"client %s (already present, now %d)" % (safe_str(unicode(reg)), num_regs()))

        self.send_ok()
        return True

    finish = fac.catch_epipe(SocketServer.StreamRequestHandler.finish)

class Server(SocketServer.ThreadingMixIn, SocketServer.TCPServer):
    allow_reuse_address = True

# Separate pools for IPv4 and IPv6 clients.
REGS_IPV4 = RegSet()
REGS_IPV6 = RegSet()

def num_regs():
    """Return the total number of registrations."""
    return len(REGS_IPV4) + len(REGS_IPV6)

def regs_for_af(af):
    """Return the correct regs pool for the given address family."""
    if af == socket.AF_INET:
        return REGS_IPV4
    elif af == socket.AF_INET6:
        return REGS_IPV6
    else:
        raise ValueError("unknown address family %d" % af)

def addr_af(addr_str):
    """Return the address family for an address string. This is a plain string,
    not a tuple, and IPv6 addresses are not bracketed."""
    addrs = socket.getaddrinfo(addr_str, 0, 0, socket.SOCK_STREAM, socket.IPPROTO_TCP, socket.AI_NUMERICHOST)
    return addrs[0][0]

def get_reg_for_proxy(proxy_addr):
    """Get a client registration appropriate for the given proxy (one of a
    matching address family)."""
    addr_str = proxy_addr[0]
    af = addr_af(addr_str)
    REGS = regs_for_af(af)
    return REGS.fetch()

def get_check_back_in_for_proxy(proxy_addr):
    """Get a CHECK-BACK-IN interval suitable for this proxy."""
    return POLL_INTERVAL

def put_reg(reg):
    """Add a registration."""
    addr_str = reg.host
    af = addr_af(addr_str)
    REGS = regs_for_af(af)
    return REGS.add(reg)

def main():
    opts, args = getopt.gnu_getopt(sys.argv[1:], "dhl:p:r:", [
        "debug",
        "help",
        "log=",
        "port=",
        "pidfile=",
        "privdrop-user=",
        "relay=",
        "unsafe-logging",
    ])
    for o, a in opts:
        if o == "-d" or o == "--debug":
            options.daemonize = False
            options.log_filename = None
        elif o == "-h" or o == "--help":
            usage()
            sys.exit()
        elif o == "-l" or o == "--log":
            options.log_filename = a
        elif o == "-p" or o == "--port":
            options.listen_port = int(a)
        elif o == "--pidfile":
            options.pid_filename = a
        elif o == "--privdrop-user":
            options.privdrop_username = a
        elif o == "-r" or o == "--relay":
            try:
                options.set_relay_spec(a)
            except socket.gaierror, e:
                print >> sys.stderr, u"Can't resolve relay %s: %s" % (repr(a), str(e))
                sys.exit(1)
        elif o == "--unsafe-logging":
            options.safe_logging = False

    if not options.relay_spec:
        print >> sys.stderr, """\
The -r option is required. Give it the relay that will be sent to proxies.
  -r HOST[:PORT]\
    """
        sys.exit(1)

    if options.log_filename:
        options.log_file = open(options.log_filename, "a")
        # Send error tracebacks to the log.
        sys.stderr = options.log_file
    else:
        options.log_file = sys.stdout

    addrinfo = socket.getaddrinfo(LISTEN_ADDRESS, options.listen_port, 0, socket.SOCK_STREAM, socket.IPPROTO_TCP)[0]

    server = Server(addrinfo[4], Handler)

    log(u"start on %s" % fac.format_addr(addrinfo[4]))
    log(u"using relay address %s" % options.relay_spec)

    if options.daemonize:
        log(u"daemonizing")
        pid = os.fork()
        if pid != 0:
            if options.pid_filename:
                f = open(options.pid_filename, "w")
                print >> f, pid
                f.close()
            sys.exit(0)

    if options.privdrop_username is not None:
        log(u"dropping privileges to those of user %s" % options.privdrop_username)
        try:
            fac.drop_privs(options.privdrop_username)
        except BaseException, e:
            print >> sys.stderr, "Can't drop privileges:", str(e)
            sys.exit(1)

    try:
        server.serve_forever()
    except KeyboardInterrupt:
        sys.exit(0)

if __name__ == "__main__":
    main()
