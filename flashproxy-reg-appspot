#!/usr/bin/env python

import errno
import getopt
import httplib
import re
import os
import socket
import ssl
import subprocess
import sys
import tempfile
import urlparse
import urllib2

from hashlib import sha1

try:
    from M2Crypto import SSL, X509
except ImportError:
    # Defer the error reporting so that --help works even without M2Crypto.
    SSL = None
    X509 = None

DEFAULT_REMOTE_ADDRESS = None
DEFAULT_REMOTE_PORT = 9000

# The domain to which requests appear to go.
FRONT_DOMAIN = "www.google.com"
# The value of the Host header within requests.
TARGET_DOMAIN = "fp-reg-a.appspot.com"

FLASHPROXY_REG_URL = "flashproxy-reg-url"

# We trust no other CA certificate than this.
#
# To find the certificate to copy here,
# $ strace openssl s_client -connect FRONT_DOMAIN:443 -verify 10 -CApath /etc/ssl/certs 2>&1 | grep /etc/ssl/certs
# stat("/etc/ssl/certs/XXXXXXXX.0", {st_mode=S_IFREG|0644, st_size=YYYY, ...}) = 0
CA_CERTS = """\
subject=/C=US/O=Equifax/OU=Equifax Secure Certificate Authority
issuer=/C=US/O=Equifax/OU=Equifax Secure Certificate Authority
-----BEGIN CERTIFICATE-----
MIIDIDCCAomgAwIBAgIENd70zzANBgkqhkiG9w0BAQUFADBOMQswCQYDVQQGEwJV
UzEQMA4GA1UEChMHRXF1aWZheDEtMCsGA1UECxMkRXF1aWZheCBTZWN1cmUgQ2Vy
dGlmaWNhdGUgQXV0aG9yaXR5MB4XDTk4MDgyMjE2NDE1MVoXDTE4MDgyMjE2NDE1
MVowTjELMAkGA1UEBhMCVVMxEDAOBgNVBAoTB0VxdWlmYXgxLTArBgNVBAsTJEVx
dWlmYXggU2VjdXJlIENlcnRpZmljYXRlIEF1dGhvcml0eTCBnzANBgkqhkiG9w0B
AQEFAAOBjQAwgYkCgYEAwV2xWGcIYu6gmi0fCG2RFGiYCh7+2gRvE4RiIcPRfM6f
BeC4AfBONOziipUEZKzxa1NfBbPLZ4C/QgKO/t0BCezhABRP/PvwDN1Dulsr4R+A
cJkVV5MW8Q+XarfCaCMczE1ZMKxRHjuvK9buY0V7xdlfUNLjUA86iOe/FP3gx7kC
AwEAAaOCAQkwggEFMHAGA1UdHwRpMGcwZaBjoGGkXzBdMQswCQYDVQQGEwJVUzEQ
MA4GA1UEChMHRXF1aWZheDEtMCsGA1UECxMkRXF1aWZheCBTZWN1cmUgQ2VydGlm
aWNhdGUgQXV0aG9yaXR5MQ0wCwYDVQQDEwRDUkwxMBoGA1UdEAQTMBGBDzIwMTgw
ODIyMTY0MTUxWjALBgNVHQ8EBAMCAQYwHwYDVR0jBBgwFoAUSOZo+SvSspXXR9gj
IBBPM5iQn9QwHQYDVR0OBBYEFEjmaPkr0rKV10fYIyAQTzOYkJ/UMAwGA1UdEwQF
MAMBAf8wGgYJKoZIhvZ9B0EABA0wCxsFVjMuMGMDAgbAMA0GCSqGSIb3DQEBBQUA
A4GBAFjOKer89961zgK5F7WF0bnj4JXMJTENAKaSbn+2kmOeUJXRmm/kEd5jhW6Y
7qj/WsjTVbJmcVfewCHrPSqnI0kBBIZCe/zuf6IWUrVnZ9NA2zsmWLIodz2uFHdh
1voqZiegDfqnc1zqcPGUIWVEX/r87yloqaKHee9570+sB3c4
-----END CERTIFICATE-----
"""
# SHA-1 digest of expected public keys. Any of these is valid. See
# http://www.imperialviolet.org/2011/05/04/pinning.html for the reason behind
# hashing the public key, not the entire certificate.
PUBKEY_SHA1 = (
    # https://src.chromium.org/viewvc/chrome/trunk/src/net/http/transport_security_state_static.h?revision=209003&view=markup
    # kSPKIHash_Google1024
    "\x40\xc5\x40\x1d\x6f\x8c\xba\xf0\x8b\x00\xed\xef\xb1\xee\x87\xd0\x05\xb3\xb9\xcd",
    # kSPKIHash_GoogleG2
    "\x43\xda\xd6\x30\xee\x53\xf8\xa9\x80\xca\x6e\xfd\x85\xf4\x6a\xa3\x79\x90\xe0\xea",
)

class options(object):
    address_family = socket.AF_UNSPEC
    use_certificate_pin = True
    facilitator_pubkey_filename = None
    safe_logging = True

def usage(f = sys.stdout):
    print >> f, """\
Usage: %(progname)s [REMOTE][:PORT]
Register with a flash proxy facilitator through a Google App Engine app.
By default the remote address registered is "%(remote_addr)s" (the
external IP address is guessed).

  -4                    name lookups use only IPv4.
  -6                    name lookups use only IPv6.
      --disable-pin     don't check server public key against a known pin.
      --facilitator-pubkey=FILENAME
                        encrypt registrations to the given PEM-formatted
                          public key (default built-in).
  -h, --help            show this help.
      --unsafe-logging  don't scrub IP addresses from logs.\
""" % {
    "progname": sys.argv[0],
    "remote_addr": format_addr((DEFAULT_REMOTE_ADDRESS, DEFAULT_REMOTE_PORT)),
}

def safe_str(s):
    """Return "[scrubbed]" if options.safe_logging is true, and s otherwise."""
    if options.safe_logging:
        return "[scrubbed]"
    else:
        return s

def parse_addr_spec(spec, defhost = None, defport = None):
    host = None
    port = None
    af = 0
    m = None
    # IPv6 syntax.
    if not m:
        m = re.match(ur'^\[(.+)\]:(\d*)$', spec)
        if m:
            host, port = m.groups()
            af = socket.AF_INET6
    if not m:
        m = re.match(ur'^\[(.+)\]$', spec)
        if m:
            host, = m.groups()
            af = socket.AF_INET6
    # IPv4/hostname/port-only syntax.
    if not m:
        try:
            host, port = spec.split(":", 1)
        except ValueError:
            host = spec
        if re.match(ur'^[\d.]+$', host):
            af = socket.AF_INET
        else:
            af = 0
    host = host or defhost
    port = port or defport
    if port is not None:
        port = int(port)
    return host, port

def format_addr(addr):
    host, port = addr
    if not host:
        return u":%d" % port
    # Numeric IPv6 address?
    try:
        addrs = socket.getaddrinfo(host, port, 0, socket.SOCK_STREAM, socket.IPPROTO_TCP, socket.AI_NUMERICHOST)
        af = addrs[0][0]
    except socket.gaierror, e:
        af = 0
    if af == socket.AF_INET6:
        result = u"[%s]" % host
    else:
        result = "%s" % host
    if port is not None:
        result += u":%d" % port
    return result

def safe_format_addr(addr):
    return safe_str(format_addr(addr))

def get_state_dir():
    """Get a directory where we can put temporary files. Returns None if any
    suitable temporary directory will do."""
    pt_dir = os.environ.get("TOR_PT_STATE_LOCATION")
    if pt_dir is None:
        return None
    try:
        os.makedirs(pt_dir)
    except OSError, e:
        if e.errno != errno.EEXIST:
            raise
    return pt_dir

def generate_url(addr):
    if getattr(sys, "frozen", False):
        script_dir = os.path.dirname(sys.executable)
    else:
        script_dir = sys.path[0]
    if not script_dir:
        # Maybe the script was read from stdin; in any case don't guess at the directory.
        raise ValueError("Can't find executable directory for registration helpers")
    command = [os.path.join(script_dir, FLASHPROXY_REG_URL)]
    command += ["-f", urlparse.urlunparse(("https", FRONT_DOMAIN, "/", "", "", ""))]
    if options.facilitator_pubkey_filename is not None:
        command += ["--facilitator-pubkey", options.facilitator_pubkey_filename]
    command.append(format_addr(addr))
    p = subprocess.Popen(command, stdout=subprocess.PIPE)
    stdout, stderr = p.communicate()
    if p.returncode != 0:
        raise ValueError("%s exited with status %d" % (FLASHPROXY_REG_URL, p.returncode))
    return stdout.strip()

# Like socket.create_connection in that it tries resolving different address
# families, but doesn't connect the socket.
def create_socket(address, timeout = None, source_address = None):
    host, port = address
    addrs = socket.getaddrinfo(host, port, 0, socket.SOCK_STREAM)
    if not addrs:
        raise error("getaddrinfo returns an empty list")
    err = None
    for addr in addrs:
        try:
            s = socket.socket(addr[0], addr[1], addr[2])
            if timeout is not None and type(timeout) == float:
                s.settimeout(timeout)
            if source_address is not None:
                s.bind(source_address)
            return s
        except Exception, e:
            err = e
    raise err

# Certificate validation and pinning for urllib2. Inspired by
# http://web.archive.org/web/20110125104752/http://www.muchtooscrawled.com/2010/03/https-certificate-verification-in-python-with-urllib2/.

class PinHTTPSConnection(httplib.HTTPSConnection):
    def connect(self):
        sock = create_socket((self.host, self.port), self.timeout, self.source_address)
        if self._tunnel_host:
            self.sock = sock
            self._tunnel()

        ctx = SSL.Context("tlsv1")
        ctx.set_verify(SSL.verify_peer, 3)

        ca_certs_fd, ca_certs_path = tempfile.mkstemp(prefix="flashproxy-reg-appspot-",
            dir=get_state_dir(), suffix=".crt")
        try:
            os.write(ca_certs_fd, CA_CERTS)
            os.close(ca_certs_fd)
            ret = ctx.load_verify_locations(ca_certs_path)
            assert ret == 1
        finally:
            os.unlink(ca_certs_path)

        self.sock = SSL.Connection(ctx, sock)
        self.sock.connect((self.host, self.port))

        if options.use_certificate_pin:
            found = []
            for cert in self.sock.get_peer_cert_chain():
                pubkey_der = cert.get_pubkey().as_der()
                pubkey_digest = sha1(pubkey_der).digest()
                if pubkey_digest in PUBKEY_SHA1:
                    break
                found.append(pubkey_digest)
            else:
                found = "(" + ", ".join(x.encode("hex") for x in found) + ")"
                expected = "(" + ", ".join(x.encode("hex") for x in PUBKEY_SHA1) + ")"
                raise ValueError("Public key does not match pin: got %s but expected any of %s" % (found, expected))

class PinHTTPSHandler(urllib2.HTTPSHandler):
    def https_open(self, req):
        return self.do_open(PinHTTPSConnection, req)

def urlopen(url):
    req = urllib2.Request(url)
    req.add_header("Host", TARGET_DOMAIN)
    opener = urllib2.build_opener(PinHTTPSHandler())
    return opener.open(req)

def get_external_ip():
    f = urlopen(urlparse.urlunparse(("https", FRONT_DOMAIN, "/ip", "", "", "")))
    try:
        return f.read().strip()
    finally:
        f.close()

opt, args = getopt.gnu_getopt(sys.argv[1:], "46h", ["disable-pin", "facilitator-pubkey=", "help", "unsafe-logging"])
for o, a in opt:
    if o == "-4":
        options.address_family = socket.AF_INET
    elif o == "-6":
        options.address_family = socket.AF_INET6
    elif o == "--disable-pin":
        options.use_certificate_pin = False
    elif o == "--facilitator-pubkey":
        options.facilitator_pubkey_filename = a
    elif o == "-h" or o == "--help":
        usage()
        sys.exit()
    elif o == "--unsafe-logging":
        options.safe_logging = False

if len(args) == 0:
    remote_addr = (DEFAULT_REMOTE_ADDRESS, DEFAULT_REMOTE_PORT)
elif len(args) == 1:
    remote_addr = parse_addr_spec(args[0], DEFAULT_REMOTE_ADDRESS, DEFAULT_REMOTE_PORT)
else:
    usage(sys.stderr)
    sys.exit(1)

if X509 is None:
    print >> sys.stderr, """\
This program requires the M2Crypto library, which is not installed.

You can install it using one of the packages at
http://chandlerproject.org/Projects/MeTooCrypto#Downloads.

On Debian-like systems, use the command "apt-get install python-m2crypto".\
"""
    sys.exit(1)

if options.address_family != socket.AF_UNSPEC:
    getaddrinfo = socket.getaddrinfo
    def getaddrinfo_replacement(host, port, family, *args, **kwargs):
        return getaddrinfo(host, port, options.address_family, *args, **kwargs)
    socket.getaddrinfo = getaddrinfo_replacement

if not remote_addr[0]:
    try:
        ip = get_external_ip()
    except urllib2.HTTPError, e:
        print >> sys.stderr, "Status code was %d, not 200" % e.code
        sys.exit(1)
    except urllib2.URLError, e:
        print >> sys.stderr, "Failed to get external IP address: %s" % str(e.reason)
        sys.exit(1)
    except Exception, e:
        print >> sys.stderr, "Failed to get external IP address: %s" % str(e)
        sys.exit(1)
    try:
        remote_addr = parse_addr_spec(ip, *remote_addr)
    except ValueError, e:
        print >> sys.stderr, "Error parsing external IP address %s: %s" % (safe_str(repr(ip)), str(e))
        sys.exit(1)

try:
    url = generate_url(remote_addr)
except Exception, e:
    print >> sys.stderr, "Error running %s: %s" % (FLASHPROXY_REG_URL, str(e))
    sys.exit(1)

try:
    http = urlopen(url)
except urllib2.HTTPError, e:
    print >> sys.stderr, "Status code was %d, not 200" % e.code
    sys.exit(1)
except urllib2.URLError, e:
    print >> sys.stderr, "Failed to register: %s" % str(e.reason)
    sys.exit(1)
except Exception, e:
    print >> sys.stderr, "Failed to register: %s" % str(e)
    sys.exit(1)
http.close()

print "Registered \"%s\" with %s." % (safe_format_addr(remote_addr), TARGET_DOMAIN)
